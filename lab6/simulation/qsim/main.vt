// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2022 18:04:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clk,
	device,
	sampler_tx
);
input  clk;
input [10:0] device;
output sampler_tx;

reg sample;
time current_time;
always @(clk or device)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	current_data,
	data,
	parity_bit,
	start_bit,
	status,
	stop_bit,
	sampler_rx
);
input [3:0] current_data;
input [0:7] data;
input  parity_bit;
input  start_bit;
input  status;
input  stop_bit;
input sampler_rx;

reg [3:0] current_data_expected;
reg [0:7] data_expected;
reg  parity_bit_expected;
reg  start_bit_expected;
reg  status_expected;
reg  stop_bit_expected;

reg [3:0] current_data_prev;
reg [0:7] data_prev;
reg  parity_bit_prev;
reg  start_bit_prev;
reg  status_prev;
reg  stop_bit_prev;

reg [3:0] current_data_expected_prev;
reg [0:7] data_expected_prev;
reg  parity_bit_expected_prev;
reg  start_bit_expected_prev;
reg  status_expected_prev;
reg  stop_bit_expected_prev;

reg [3:0] last_current_data_exp;
reg [0:7] last_data_exp;
reg  last_parity_bit_exp;
reg  last_start_bit_exp;
reg  last_status_exp;
reg  last_stop_bit_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	current_data_prev = current_data;
	data_prev = data;
	parity_bit_prev = parity_bit;
	start_bit_prev = start_bit;
	status_prev = status;
	stop_bit_prev = stop_bit;
end

// update expected /o prevs

always @(trigger)
begin
	current_data_expected_prev = current_data_expected;
	data_expected_prev = data_expected;
	parity_bit_expected_prev = parity_bit_expected;
	start_bit_expected_prev = start_bit_expected;
	status_expected_prev = status_expected;
	stop_bit_expected_prev = stop_bit_expected;
end


// expected current_data[ 3 ]
initial
begin
	current_data_expected[3] = 1'bX;
end 
// expected current_data[ 2 ]
initial
begin
	current_data_expected[2] = 1'bX;
end 
// expected current_data[ 1 ]
initial
begin
	current_data_expected[1] = 1'bX;
end 
// expected current_data[ 0 ]
initial
begin
	current_data_expected[0] = 1'bX;
end 
// expected data[ 7 ]
initial
begin
	data_expected[7] = 1'bX;
end 
// expected data[ 6 ]
initial
begin
	data_expected[6] = 1'bX;
end 
// expected data[ 5 ]
initial
begin
	data_expected[5] = 1'bX;
end 
// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 

// expected parity_bit
initial
begin
	parity_bit_expected = 1'bX;
end 

// expected start_bit
initial
begin
	start_bit_expected = 1'bX;
end 

// expected stop_bit
initial
begin
	stop_bit_expected = 1'bX;
end 

// expected status
initial
begin
	status_expected = 1'bX;
end 
// generate trigger
always @(current_data_expected or current_data or data_expected or data or parity_bit_expected or parity_bit or start_bit_expected or start_bit or status_expected or status or stop_bit_expected or stop_bit)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected current_data = %b | expected data = %b | expected parity_bit = %b | expected start_bit = %b | expected status = %b | expected stop_bit = %b | ",current_data_expected_prev,data_expected_prev,parity_bit_expected_prev,start_bit_expected_prev,status_expected_prev,stop_bit_expected_prev);
	$display("| real current_data = %b | real data = %b | real parity_bit = %b | real start_bit = %b | real status = %b | real stop_bit = %b | ",current_data_prev,data_prev,parity_bit_prev,start_bit_prev,status_prev,stop_bit_prev);
`endif
	if (
		( current_data_expected_prev[0] !== 1'bx ) && ( current_data_prev[0] !== current_data_expected_prev[0] )
		&& ((current_data_expected_prev[0] !== last_current_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_data_expected_prev);
		$display ("     Real value = %b", current_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_data_exp[0] = current_data_expected_prev[0];
	end
	if (
		( current_data_expected_prev[1] !== 1'bx ) && ( current_data_prev[1] !== current_data_expected_prev[1] )
		&& ((current_data_expected_prev[1] !== last_current_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_data_expected_prev);
		$display ("     Real value = %b", current_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_data_exp[1] = current_data_expected_prev[1];
	end
	if (
		( current_data_expected_prev[2] !== 1'bx ) && ( current_data_prev[2] !== current_data_expected_prev[2] )
		&& ((current_data_expected_prev[2] !== last_current_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_data_expected_prev);
		$display ("     Real value = %b", current_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_data_exp[2] = current_data_expected_prev[2];
	end
	if (
		( current_data_expected_prev[3] !== 1'bx ) && ( current_data_prev[3] !== current_data_expected_prev[3] )
		&& ((current_data_expected_prev[3] !== last_current_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_data_expected_prev);
		$display ("     Real value = %b", current_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_data_exp[3] = current_data_expected_prev[3];
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( parity_bit_expected_prev !== 1'bx ) && ( parity_bit_prev !== parity_bit_expected_prev )
		&& ((parity_bit_expected_prev !== last_parity_bit_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_bit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_bit_expected_prev);
		$display ("     Real value = %b", parity_bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_bit_exp = parity_bit_expected_prev;
	end
	if (
		( start_bit_expected_prev !== 1'bx ) && ( start_bit_prev !== start_bit_expected_prev )
		&& ((start_bit_expected_prev !== last_start_bit_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start_bit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_bit_expected_prev);
		$display ("     Real value = %b", start_bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_start_bit_exp = start_bit_expected_prev;
	end
	if (
		( status_expected_prev !== 1'bx ) && ( status_prev !== status_expected_prev )
		&& ((status_expected_prev !== last_status_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port status :: @time = %t",  $realtime);
		$display ("     Expected value = %b", status_expected_prev);
		$display ("     Real value = %b", status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_status_exp = status_expected_prev;
	end
	if (
		( stop_bit_expected_prev !== 1'bx ) && ( stop_bit_prev !== stop_bit_expected_prev )
		&& ((stop_bit_expected_prev !== last_stop_bit_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stop_bit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stop_bit_expected_prev);
		$display ("     Real value = %b", stop_bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stop_bit_exp = stop_bit_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [10:0] device;
// wires                                               
wire [3:0] current_data;
wire [0:7] data;
wire parity_bit;
wire start_bit;
wire status;
wire stop_bit;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.current_data(current_data),
	.data(data),
	.device(device),
	.parity_bit(parity_bit),
	.start_bit(start_bit),
	.status(status),
	.stop_bit(stop_bit)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #100000 1'b1;
end 
// device[ 10 ]
initial
begin
	device[10] = 1'b0;
end 
// device[ 9 ]
initial
begin
	device[9] = 1'b1;
end 
// device[ 8 ]
initial
begin
	device[8] = 1'b0;
end 
// device[ 7 ]
initial
begin
	device[7] = 1'b1;
end 
// device[ 6 ]
initial
begin
	device[6] = 1'b0;
end 
// device[ 5 ]
initial
begin
	device[5] = 1'b1;
end 
// device[ 4 ]
initial
begin
	device[4] = 1'b0;
end 
// device[ 3 ]
initial
begin
	device[3] = 1'b0;
end 
// device[ 2 ]
initial
begin
	device[2] = 1'b0;
end 
// device[ 1 ]
initial
begin
	device[1] = 1'b0;
end 
// device[ 0 ]
initial
begin
	device[0] = 1'b1;
end 

main_vlg_sample_tst tb_sample (
	.clk(clk),
	.device(device),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.current_data(current_data),
	.data(data),
	.parity_bit(parity_bit),
	.start_bit(start_bit),
	.status(status),
	.stop_bit(stop_bit),
	.sampler_rx(sampler)
);
endmodule

