// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2022 21:36:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4_vlg_sample_tst(
	KEY,
	SW,
	clk,
	sampler_tx
);
input [1:0] KEY;
input [9:0] SW;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(KEY or SW or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab4_vlg_check_tst (
	HEX0,
	HEX1,
	LEDR,
	count,
	high_count,
	low_count,
	shift_rg,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [9:0] LEDR;
input [6:0] count;
input [3:0] high_count;
input [6:0] low_count;
input [9:0] shift_rg;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [9:0] LEDR_expected;
reg [6:0] count_expected;
reg [3:0] high_count_expected;
reg [6:0] low_count_expected;
reg [9:0] shift_rg_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [9:0] LEDR_prev;
reg [6:0] count_prev;
reg [3:0] high_count_prev;
reg [6:0] low_count_prev;
reg [9:0] shift_rg_prev;

reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [9:0] LEDR_expected_prev;
reg [6:0] count_expected_prev;
reg [3:0] high_count_expected_prev;
reg [6:0] low_count_expected_prev;
reg [9:0] shift_rg_expected_prev;

reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [9:0] last_LEDR_exp;
reg [6:0] last_count_exp;
reg [3:0] last_high_count_exp;
reg [6:0] last_low_count_exp;
reg [9:0] last_shift_rg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	LEDR_prev = LEDR;
	count_prev = count;
	high_count_prev = high_count;
	low_count_prev = low_count;
	shift_rg_prev = shift_rg;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	LEDR_expected_prev = LEDR_expected;
	count_expected_prev = count_expected;
	high_count_expected_prev = high_count_expected;
	low_count_expected_prev = low_count_expected;
	shift_rg_expected_prev = shift_rg_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
	HEX0_expected[6] = #4999000 1'b0;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
	HEX0_expected[5] = #4999000 1'b0;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
	HEX0_expected[4] = #4999000 1'b0;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
	HEX0_expected[3] = #4999000 1'b0;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
	HEX0_expected[2] = #4999000 1'b0;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
	HEX0_expected[1] = #4999000 1'b0;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
	HEX0_expected[0] = #4999000 1'b0;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
	HEX1_expected[6] = #4999000 1'b0;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
	HEX1_expected[5] = #4999000 1'b0;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
	HEX1_expected[4] = #4999000 1'b0;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
	HEX1_expected[3] = #4999000 1'b0;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
	HEX1_expected[2] = #4999000 1'b0;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
	HEX1_expected[1] = #4999000 1'b0;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
	HEX1_expected[0] = #4999000 1'b0;
end 
// expected LEDR[ 9 ]
initial
begin
	LEDR_expected[9] = 1'bX;
	LEDR_expected[9] = #1999000 1'b0;
end 
// expected LEDR[ 8 ]
initial
begin
	LEDR_expected[8] = 1'bX;
	LEDR_expected[8] = #1999000 1'b0;
end 
// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
	LEDR_expected[7] = #1999000 1'b0;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
	LEDR_expected[6] = #1999000 1'b0;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
	LEDR_expected[5] = #1999000 1'b0;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
	LEDR_expected[4] = #1999000 1'b0;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
	LEDR_expected[3] = #1999000 1'b0;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
	LEDR_expected[2] = #1999000 1'b0;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
	LEDR_expected[1] = #1999000 1'b0;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
	LEDR_expected[0] = #1999000 1'b0;
end 
// expected shift_rg[ 9 ]
initial
begin
	shift_rg_expected[9] = 1'bX;
	shift_rg_expected[9] = #1999000 1'b0;
end 
// expected shift_rg[ 8 ]
initial
begin
	shift_rg_expected[8] = 1'bX;
	shift_rg_expected[8] = #1999000 1'b0;
end 
// expected shift_rg[ 7 ]
initial
begin
	shift_rg_expected[7] = 1'bX;
	shift_rg_expected[7] = #1999000 1'b0;
end 
// expected shift_rg[ 6 ]
initial
begin
	shift_rg_expected[6] = 1'bX;
	shift_rg_expected[6] = #1999000 1'b0;
end 
// expected shift_rg[ 5 ]
initial
begin
	shift_rg_expected[5] = 1'bX;
	shift_rg_expected[5] = #1999000 1'b0;
end 
// expected shift_rg[ 4 ]
initial
begin
	shift_rg_expected[4] = 1'bX;
	shift_rg_expected[4] = #1999000 1'b0;
end 
// expected shift_rg[ 3 ]
initial
begin
	shift_rg_expected[3] = 1'bX;
	shift_rg_expected[3] = #1999000 1'b0;
end 
// expected shift_rg[ 2 ]
initial
begin
	shift_rg_expected[2] = 1'bX;
	shift_rg_expected[2] = #1999000 1'b0;
end 
// expected shift_rg[ 1 ]
initial
begin
	shift_rg_expected[1] = 1'bX;
	shift_rg_expected[1] = #1999000 1'b0;
end 
// expected shift_rg[ 0 ]
initial
begin
	shift_rg_expected[0] = 1'bX;
	shift_rg_expected[0] = #1999000 1'b0;
end 
// expected count[ 6 ]
initial
begin
	count_expected[6] = 1'bX;
	count_expected[6] = #1999000 1'b0;
end 
// expected count[ 5 ]
initial
begin
	count_expected[5] = 1'bX;
	count_expected[5] = #1999000 1'b0;
end 
// expected count[ 4 ]
initial
begin
	count_expected[4] = 1'bX;
	count_expected[4] = #1999000 1'b0;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
	count_expected[3] = #1999000 1'b0;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
	count_expected[2] = #1999000 1'b0;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
	count_expected[1] = #1999000 1'b0;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
	count_expected[0] = #1999000 1'b0;
end 
// expected high_count[ 3 ]
initial
begin
	high_count_expected[3] = 1'bX;
end 
// expected high_count[ 2 ]
initial
begin
	high_count_expected[2] = 1'bX;
end 
// expected high_count[ 1 ]
initial
begin
	high_count_expected[1] = 1'bX;
end 
// expected high_count[ 0 ]
initial
begin
	high_count_expected[0] = 1'bX;
end 
// expected low_count[ 6 ]
initial
begin
	low_count_expected[6] = 1'bX;
end 
// expected low_count[ 5 ]
initial
begin
	low_count_expected[5] = 1'bX;
end 
// expected low_count[ 4 ]
initial
begin
	low_count_expected[4] = 1'bX;
end 
// expected low_count[ 3 ]
initial
begin
	low_count_expected[3] = 1'bX;
end 
// expected low_count[ 2 ]
initial
begin
	low_count_expected[2] = 1'bX;
end 
// expected low_count[ 1 ]
initial
begin
	low_count_expected[1] = 1'bX;
end 
// expected low_count[ 0 ]
initial
begin
	low_count_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or LEDR_expected or LEDR or count_expected or count or high_count_expected or high_count or low_count_expected or low_count or shift_rg_expected or shift_rg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected LEDR = %b | expected count = %b | expected high_count = %b | expected low_count = %b | expected shift_rg = %b | ",HEX0_expected_prev,HEX1_expected_prev,LEDR_expected_prev,count_expected_prev,high_count_expected_prev,low_count_expected_prev,shift_rg_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real LEDR = %b | real count = %b | real high_count = %b | real low_count = %b | real shift_rg = %b | ",HEX0_prev,HEX1_prev,LEDR_prev,count_prev,high_count_prev,low_count_prev,shift_rg_prev);
`endif
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( count_expected_prev[4] !== 1'bx ) && ( count_prev[4] !== count_expected_prev[4] )
		&& ((count_expected_prev[4] !== last_count_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[4] = count_expected_prev[4];
	end
	if (
		( count_expected_prev[5] !== 1'bx ) && ( count_prev[5] !== count_expected_prev[5] )
		&& ((count_expected_prev[5] !== last_count_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[5] = count_expected_prev[5];
	end
	if (
		( count_expected_prev[6] !== 1'bx ) && ( count_prev[6] !== count_expected_prev[6] )
		&& ((count_expected_prev[6] !== last_count_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[6] = count_expected_prev[6];
	end
	if (
		( high_count_expected_prev[0] !== 1'bx ) && ( high_count_prev[0] !== high_count_expected_prev[0] )
		&& ((high_count_expected_prev[0] !== last_high_count_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_count_expected_prev);
		$display ("     Real value = %b", high_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_high_count_exp[0] = high_count_expected_prev[0];
	end
	if (
		( high_count_expected_prev[1] !== 1'bx ) && ( high_count_prev[1] !== high_count_expected_prev[1] )
		&& ((high_count_expected_prev[1] !== last_high_count_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_count_expected_prev);
		$display ("     Real value = %b", high_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_high_count_exp[1] = high_count_expected_prev[1];
	end
	if (
		( high_count_expected_prev[2] !== 1'bx ) && ( high_count_prev[2] !== high_count_expected_prev[2] )
		&& ((high_count_expected_prev[2] !== last_high_count_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_count_expected_prev);
		$display ("     Real value = %b", high_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_high_count_exp[2] = high_count_expected_prev[2];
	end
	if (
		( high_count_expected_prev[3] !== 1'bx ) && ( high_count_prev[3] !== high_count_expected_prev[3] )
		&& ((high_count_expected_prev[3] !== last_high_count_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_count_expected_prev);
		$display ("     Real value = %b", high_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_high_count_exp[3] = high_count_expected_prev[3];
	end
	if (
		( low_count_expected_prev[0] !== 1'bx ) && ( low_count_prev[0] !== low_count_expected_prev[0] )
		&& ((low_count_expected_prev[0] !== last_low_count_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[0] = low_count_expected_prev[0];
	end
	if (
		( low_count_expected_prev[1] !== 1'bx ) && ( low_count_prev[1] !== low_count_expected_prev[1] )
		&& ((low_count_expected_prev[1] !== last_low_count_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[1] = low_count_expected_prev[1];
	end
	if (
		( low_count_expected_prev[2] !== 1'bx ) && ( low_count_prev[2] !== low_count_expected_prev[2] )
		&& ((low_count_expected_prev[2] !== last_low_count_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[2] = low_count_expected_prev[2];
	end
	if (
		( low_count_expected_prev[3] !== 1'bx ) && ( low_count_prev[3] !== low_count_expected_prev[3] )
		&& ((low_count_expected_prev[3] !== last_low_count_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[3] = low_count_expected_prev[3];
	end
	if (
		( low_count_expected_prev[4] !== 1'bx ) && ( low_count_prev[4] !== low_count_expected_prev[4] )
		&& ((low_count_expected_prev[4] !== last_low_count_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[4] = low_count_expected_prev[4];
	end
	if (
		( low_count_expected_prev[5] !== 1'bx ) && ( low_count_prev[5] !== low_count_expected_prev[5] )
		&& ((low_count_expected_prev[5] !== last_low_count_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[5] = low_count_expected_prev[5];
	end
	if (
		( low_count_expected_prev[6] !== 1'bx ) && ( low_count_prev[6] !== low_count_expected_prev[6] )
		&& ((low_count_expected_prev[6] !== last_low_count_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_count_expected_prev);
		$display ("     Real value = %b", low_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_low_count_exp[6] = low_count_expected_prev[6];
	end
	if (
		( shift_rg_expected_prev[0] !== 1'bx ) && ( shift_rg_prev[0] !== shift_rg_expected_prev[0] )
		&& ((shift_rg_expected_prev[0] !== last_shift_rg_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[0] = shift_rg_expected_prev[0];
	end
	if (
		( shift_rg_expected_prev[1] !== 1'bx ) && ( shift_rg_prev[1] !== shift_rg_expected_prev[1] )
		&& ((shift_rg_expected_prev[1] !== last_shift_rg_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[1] = shift_rg_expected_prev[1];
	end
	if (
		( shift_rg_expected_prev[2] !== 1'bx ) && ( shift_rg_prev[2] !== shift_rg_expected_prev[2] )
		&& ((shift_rg_expected_prev[2] !== last_shift_rg_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[2] = shift_rg_expected_prev[2];
	end
	if (
		( shift_rg_expected_prev[3] !== 1'bx ) && ( shift_rg_prev[3] !== shift_rg_expected_prev[3] )
		&& ((shift_rg_expected_prev[3] !== last_shift_rg_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[3] = shift_rg_expected_prev[3];
	end
	if (
		( shift_rg_expected_prev[4] !== 1'bx ) && ( shift_rg_prev[4] !== shift_rg_expected_prev[4] )
		&& ((shift_rg_expected_prev[4] !== last_shift_rg_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[4] = shift_rg_expected_prev[4];
	end
	if (
		( shift_rg_expected_prev[5] !== 1'bx ) && ( shift_rg_prev[5] !== shift_rg_expected_prev[5] )
		&& ((shift_rg_expected_prev[5] !== last_shift_rg_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[5] = shift_rg_expected_prev[5];
	end
	if (
		( shift_rg_expected_prev[6] !== 1'bx ) && ( shift_rg_prev[6] !== shift_rg_expected_prev[6] )
		&& ((shift_rg_expected_prev[6] !== last_shift_rg_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[6] = shift_rg_expected_prev[6];
	end
	if (
		( shift_rg_expected_prev[7] !== 1'bx ) && ( shift_rg_prev[7] !== shift_rg_expected_prev[7] )
		&& ((shift_rg_expected_prev[7] !== last_shift_rg_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[7] = shift_rg_expected_prev[7];
	end
	if (
		( shift_rg_expected_prev[8] !== 1'bx ) && ( shift_rg_prev[8] !== shift_rg_expected_prev[8] )
		&& ((shift_rg_expected_prev[8] !== last_shift_rg_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[8] = shift_rg_expected_prev[8];
	end
	if (
		( shift_rg_expected_prev[9] !== 1'bx ) && ( shift_rg_prev[9] !== shift_rg_expected_prev[9] )
		&& ((shift_rg_expected_prev[9] !== last_shift_rg_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shift_rg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shift_rg_expected_prev);
		$display ("     Real value = %b", shift_rg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_shift_rg_exp[9] = shift_rg_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] KEY;
reg [9:0] SW;
reg clk;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [9:0] LEDR;
wire [6:0] count;
wire [3:0] high_count;
wire [6:0] low_count;
wire [9:0] shift_rg;

wire sampler;                             

// assign statements (if any)                          
lab4 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW),
	.clk(clk),
	.count(count),
	.high_count(high_count),
	.low_count(low_count),
	.shift_rg(shift_rg)
);
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b1;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

// clk
initial
begin
	repeat(66)
	begin
		clk = 1'b0;
		clk = #300000 1'b1;
		# 300000;
	end
	clk = 1'b0;
	clk = #300000 1'b1;
end 

lab4_vlg_sample_tst tb_sample (
	.KEY(KEY),
	.SW(SW),
	.clk(clk),
	.sampler_tx(sampler)
);

lab4_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.LEDR(LEDR),
	.count(count),
	.high_count(high_count),
	.low_count(low_count),
	.shift_rg(shift_rg),
	.sampler_rx(sampler)
);
endmodule

