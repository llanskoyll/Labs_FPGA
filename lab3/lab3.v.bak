module lab3(
	input [3:0] v,
	input [3:0] num_border,
	output [3:0] m,
	output reg [3:0] v_correct,
	output z_ex,
	output [3:0] SchemaB_out,
	output reg [6:0] HEX0,
	output reg [6:0] HEX1
);

wire CMP_block_0 = ((v[0] & ~num_border[0]) & (~(v[1] ^ num_border[1])) & (~(v[2] ^ num_border[2])) & (~(v[3] ^ num_border[3])));
wire CMP_block_1 = ((v[1] & ~num_border[1]) & (~(v[2] ^ num_border[2])) & (~(v[3] ^ num_border[3])));
wire CMP_block_2 = ((v[2] & ~num_border[2]) & (~(v[3] ^ num_border[3])));
wire CMP_block_3 = (v[3] & ~num_border[3]);
wire z = CMP_block_0 | CMP_block_1 | CMP_block_2 | CMP_block_3;

	always @* begin
		case(v)
			4'd0: v_correct = 4'd0;
			4'd1: v_correct = 4'd1;
			4'd2: v_correct = 4'd2;
			4'd3: v_correct = 4'd3;
			4'd4: v_correct = 4'd4;
			4'd5: v_correct = 4'd5;
			4'd6: v_correct = 4'd6;
			4'd7: v_correct = 4'd7;
			4'd8: v_correct = 4'd8;
			4'd9: v_correct = 4'd9;
			4'd10: v_correct = 4'd0;
			4'd11: v_correct = 4'd1;
			4'd12: v_correct = 4'd2;
			4'd13: v_correct = 4'd3;
			4'd14: v_correct = 4'd4;
			4'd15: v_correct = 4'd5;
		endcase
	end
wire [3:0] v_crr;
assign v_crr [3:0] = v_correct[3:0];

assign m[2:0] = ({3{~z}} & v[2:0]) | ({3{z}} & v_crr[2:0]);
assign m[3] = (~z & v[3]) | (z & 0);

	always @* begin
		case(m) 
			4'd0: HEX0 = 7'b1000000;
			4'd1: HEX0 = 7'b1111001;
			4'd2: HEX0 = 7'b0100100;
			4'd3: HEX0 = 7'b0110000;
			4'd4: HEX0 = 7'b0011001;
			4'd5: HEX0 = 7'b0010010;
			4'd6: HEX0 = 7'b0000010;
			4'd7: HEX0 = 7'b1111000;
			4'd8: HEX0 = 7'b0000000;
			4'd9: HEX0 = 7'b0010000;
		endcase
	end
	
	assign z_ex = & z;
	assign SchemaB_out[3:0] = {4{~z}};
	always @* begin
		if(z_ex) begin
			case(SchemaB_out)
				4'd0: HEX1 = 7'b1000000;
				4'd1: HEX1 = 7'b1111001;
				4'd2: HEX1 = 7'b0100100;
				4'd3: HEX1 = 7'b0110000;
				4'd4: HEX1 = 7'b0011001;
				4'd5: HEX1 = 7'b0010010;
				4'd6: HEX1 = 7'b0000010;
				4'd7: HEX1 = 7'b1111000;
				4'd8: HEX1 = 7'b0000000;
				4'd9: HEX1 = 7'b0010000;
			endcase
		end
	end
endmodule
